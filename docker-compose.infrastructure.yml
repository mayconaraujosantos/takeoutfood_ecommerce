services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ifood-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ifood-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ifood-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - ifood-network
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics",
          "--bootstrap-server",
          "localhost:9092",
          "--list",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:15
    container_name: ifood-postgres
    environment:
      POSTGRES_DB: ifood_db
      POSTGRES_USER: ifood_user
      POSTGRES_PASSWORD: ifood_pass
      POSTGRES_MULTIPLE_DATABASES: auth_db,user_db,restaurant_db,menu_db,order_db,payment_db,delivery_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sh:/docker-entrypoint-initdb.d/init-postgres.sh
    networks:
      - ifood-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ifood_user -d ifood_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7.0
    container_name: ifood-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ifood_user
      MONGO_INITDB_ROOT_PASSWORD: ifood_pass
      MONGO_INITDB_DATABASE: ifood_notifications
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - ifood-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: ifood-redis
    ports:
      - "6380:6379"
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ifood_redis_pass
      --user ifood_user on +@all ~* &ifood_redis_pass
      --user default off
    volumes:
      - redis_data:/data
    networks:
      - ifood-network
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "--user",
          "ifood_user",
          "-a",
          "ifood_redis_pass",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local

networks:
  ifood-network:
    name: ifood-network
    driver: bridge
