services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ifood-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - ifood-network

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ifood_db
      POSTGRES_USER: ifood_user
      POSTGRES_PASSWORD: ifood_pass
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ifood_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ifood-network

  mongodb:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: ifood_user
      MONGO_INITDB_ROOT_PASSWORD: ifood_pass
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ifood-network

  redis:
    image: redis:7.2-alpine
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - ifood-network

  # Microservices
  config-server:
    build:
      context: .
      dockerfile: config-server/Dockerfile
    ports:
      - "8888:8888"
    environment:
      SPRING_PROFILES_ACTIVE: native
    labels:
      - "logging=promtail"
    volumes:
      - ./logs:/app/logs
    networks:
      - ifood-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8888/actuator/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  service-discovery:
    build:
      context: .
      dockerfile: service-discovery/Dockerfile
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
    labels:
      - "logging=promtail"
    volumes:
      - ./logs:/app/logs
    networks:
      - ifood-network

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - service-discovery
      - config-server
    environment:
      SPRING_PROFILES_ACTIVE: prod
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://service-discovery:8761
    labels:
      - "logging=promtail"
    volumes:
      - ./logs:/app/logs
    networks:
      - ifood-network

  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      service-discovery:
        condition: service_started
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: dev
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://service-discovery:8761
      DATABASE_URL: jdbc:postgresql://postgres:5432/ifood_db
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ifood_db
      DB_USER: ifood_user
      DB_PASSWORD: ifood_pass
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_USER: ifood_user
      REDIS_PASSWORD: ifood_redis_pass
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    labels:
      - "logging=promtail"
    volumes:
      - ./logs:/app/logs
    networks:
      - ifood-network
    restart: on-failure

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      service-discovery:
        condition: service_started
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://service-discovery:8761
      DATABASE_URL: jdbc:postgresql://postgres:5432/ifood_db
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    labels:
      - "logging=promtail"
    volumes:
      - ./logs:/app/logs
    networks:
      - ifood-network

  restaurant-service:
    build:
      context: .
      dockerfile: restaurant-service/Dockerfile
    ports:
      - "8083:8083"
    depends_on:
      service-discovery:
        condition: service_started
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://service-discovery:8761
      DATABASE_URL: jdbc:postgresql://postgres:5432/ifood_db
      DB_USERNAME: ifood_user
      DB_PASSWORD: ifood_pass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - ifood-network

  menu-service:
    build:
      context: .
      dockerfile: menu-service/Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      service-discovery:
        condition: service_started
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://service-discovery:8761
      DATABASE_URL: jdbc:postgresql://postgres:5432/ifood_db
      DB_USERNAME: ifood_user
      DB_PASSWORD: ifood_pass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - ifood-network

  order-service:
    build:
      context: .
      dockerfile: order-service/Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      service-discovery:
        condition: service_started
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://service-discovery:8761
      DATABASE_URL: jdbc:postgresql://postgres:5432/ifood_db
      DB_USERNAME: ifood_user
      DB_PASSWORD: ifood_pass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - ifood-network

  payment-service:
    build:
      context: .
      dockerfile: payment-service/Dockerfile
    ports:
      - "8086:8086"
    depends_on:
      service-discovery:
        condition: service_started
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://service-discovery:8761
      DATABASE_URL: jdbc:postgresql://postgres:5432/ifood_db
      DB_USERNAME: ifood_user
      DB_PASSWORD: ifood_pass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - ifood-network

  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    ports:
      - "8087:8087"
    depends_on:
      service-discovery:
        condition: service_started
      config-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://service-discovery:8761
      MONGODB_URI: mongodb://ifood_user:ifood_pass@mongodb:27017/ifood_notifications
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - ifood-network
    labels:
      - "logging=promtail"
    volumes:
      - ./logs:/app/logs

  delivery-service:
    build:
      context: .
      dockerfile: delivery-service/Dockerfile
    ports:
      - "8088:8088"
    depends_on:
      service-discovery:
        condition: service_started
      config-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://service-discovery:8761
      DATABASE_URL: jdbc:postgresql://postgres:5432/ifood_db
      DB_USERNAME: ifood_user
      DB_PASSWORD: ifood_pass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - ifood-network

  review-service:
    build:
      context: .
      dockerfile: review-service/Dockerfile
    ports:
      - "8089:8089"
    depends_on:
      service-discovery:
        condition: service_started
      config-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_SERVER_URL: http://service-discovery:8761
      MONGODB_URI: mongodb://ifood_user:ifood_pass@mongodb:27017/ifood_reviews
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - ifood-network

volumes:
  postgres_data:
  mongo_data:
  redis_data:

networks:
  ifood-network:
    name: ifood-network
    driver: bridge
    external: false
